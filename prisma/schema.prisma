generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["nativeDistinct", "fullTextSearchPostgres"]
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model Media {
  tmdbId            Int
  season            Int
  imdbId            String?
  backdropImages    String[]
  posterImages      String[]
  videos            String[]
  title             String
  originalTitle     String
  alternativeTitles String[]
  overview          String
  releaseDate       String
  posterPath        String?
  backdropPath      String?
  status            String?
  popularity        Float           @default(0)
  rating            Float           @default(0)
  adult             Boolean         @default(false)
  tagline           String?
  mediaType         MediaType
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now()) @updatedAt
  id                Int             @id @default(autoincrement())
  episodes          Episode[]
  genres            Genre[]
  networks          Network[]
  watchProviders    WatchProvider[]

  @@unique([mediaType, tmdbId, season])
}

model Episode {
  season      Int
  number      Int
  runtime     Int      @default(0)
  rating      Float    @default(0)
  title       String?
  releaseDate String?
  description String?
  stillPath   String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
  id          Int      @id @default(autoincrement())
  mediaId     Int
  media       Media    @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  players     Player[]

  @@unique([mediaId, season, number])
}

model Player {
  url           String    @unique
  languageName  String
  videoHostName String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  id            Int       @id @default(autoincrement())
  episodeId     Int
  episode       Episode   @relation(fields: [episodeId], references: [id], onDelete: Cascade)
  language      Language  @relation(fields: [languageName], references: [name], onDelete: Cascade)
  videoHost     VideoHost @relation(fields: [videoHostName], references: [name], onDelete: Cascade)
}

model VideoHost {
  name      String   @unique
  slug      String   @unique
  priority  Int      @default(10)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  id        Int      @id @default(autoincrement())
  players   Player[]
}

model Language {
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  id        Int      @id @default(autoincrement())
  players   Player[]
}

model Genre {
  tmdbId    Int      @unique
  name      String   @unique
  slug      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  id        Int      @id @default(autoincrement())
  media     Media[]
}

model WatchProvider {
  slug      String   @unique
  tmdbId    Int      @unique
  name      String   @unique
  logoPath  String
  priority  Int      @default(20)
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  id        Int      @id @default(autoincrement())
  media     Media[]
}

model Network {
  slug      String   @unique
  tmdbId    Int      @unique
  logoPath  String
  name      String
  country   String
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  id        Int      @id @default(autoincrement())
  media     Media[]
}

enum MediaType {
  series
  movies
}
